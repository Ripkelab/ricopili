#!/usr/bin/env perl


use strict;
use warnings;


my $version = "1.0.0";
my $progname = $0;
$progname =~ s!^.*/!!;



#############################
# load utility functions
#############################

use FindBin;
use lib "$FindBin::Bin";
use Ricopili::Utils qw(trans);


my $bcloc = &trans("bcloc");
my $bcrloc = &trans("bcrloc");


use Compress::Zlib ;




$bcloc =~ s/###/ /g;





##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}



my $vcffile = "";
my $mac_th = 4;

use Getopt::Long;
GetOptions( 
    "help"=> \my $help,
    "chrX"=> \my $chrX,
    "vcf=s"=> \$vcffile,
    "fam=s"=> \my $famfile,
    "mac_th=i"=> \$mac_th,
    "debug"=> \my $debug,
    "no_fasta"=> \my $no_fasta,
    "build_hg38"=> \my $build_hg38,


    );


if ($help || $vcffile eq ""){
    print "usage: $progname

version: $version

      options:

        --help              this help-text
        --vcf STRING        name of vcf file
        --out STRING        prefix, haps.gz, legend.gz will be appended
        --mac_th INT        minimum minor allele count
        --chrX              filter chromosome X for only non-PAR needs --fam
        --fam STRING        defines the nuber of haplotypes, only used with --chrx

        --debug             extended output
        --no_fasta          no alignment with fasta file



 created by Stephan Ripke 2016 at MGH, Boston, MA
 in the frame of the PGC
\n";
    exit 2;
}


my $chrX_filter = "";
if ($chrX) {
    unless (-e $famfile) {
	print "if option --chrX is on, please specify famfile\n";
    }
    my $nhaps = 0;
    die $!."($famfile)" unless open FILE, "< $famfile";
    while (my $line = <FILE>){
	$nhaps += 2;
    }
    close FILE;
    $chrX_filter = " & AN<".$nhaps;
}






my $fasta_file = "$bcrloc/human_g1k_v37.fasta";
if ($build_hg38) {
    $fasta_file = "$bcrloc/Homo_sapiens_assembly38.fasta";
}

unless (-e $fasta_file){
    print "Error: $fasta_file not existing\n";
    exit;
}

my $bcftools2 = $bcloc."bcftools";;
if ($bcloc =~ / /) {
    $bcftools2 = "bcftools";
}


##########################################################################
### no translation of X into 23, since it vcf does not accept it
#######################################################################


if (1) {
#unless ($chr23) {
    my $sys = "$bcloc"."bcftools norm -m-both -N -f $fasta_file $vcffile | $bcftools2 filter -i \' MAC>".$mac_th.$chrX_filter." \'| gzip -c > $vcffile.filtnorm.gz";
    if ($no_fasta) {
	$sys = "$bcftools2 filter -i \' MAC>".$mac_th.$chrX_filter." \' $vcffile| gzip -c > $vcffile.filtnorm.gz";
    }
    print "$sys\n"  if ($debug);
    die $! unless open CMDFILE, "> $vcffile.filtnorm.gz.cmd";
    print CMDFILE $sys."\n";
    close CMDFILE;
    
    my $sc =system ($sys);
    if ($sc != 0){
	print "Error systemcode: $sc\n";
	exit;
    }

}
else {
    my $sys = "$bcloc"."bcftools norm -m-both -f $fasta_file $vcffile | $bcftools2 filter -i \' MAC>".$mac_th.$chrX_filter." \'| gzip -c > $vcffile.filtnorm.tmp23.gz";
    print "running this command: $sys\n"  if ($debug);
    my $sc =system ($sys);
    if ($sc != 0){
	print "Error systemcode: $sc\n";
	exit;
    }


    print "changing X into 23 in $vcffile.filtnorm.tmp23.gz\n";
    my $igz = gzopen("$vcffile.filtnorm.tmp23.gz", "rb")  or die "Cannot open file $vcffile.filtnorm.tmp23.gz: $gzerrno\n" ;
    my $ogz = gzopen("$vcffile.filtnorm.gz", "wb")  or die "Cannot open file $vcffile.filtnorm.gz: $gzerrno\n" ;
    


    while ($igz->gzreadline(my $line)){
	chomp($line);
	my @cells = @{&split_line_ref(\$line)};

	if ($cells[0] eq "X") {
	    $cells[0] = "23";
	    $ogz->gzwrite(join("\t", @cells)."\n");	
	}
	else {
	    $ogz->gzwrite("$line\n");
	}

	
    }

    $igz->gzclose();
    $ogz->gzclose();

#    system ("rm $vcffile.filtnorm.tmp23.gz");

}


system ("touch $vcffile.filtnorm.gz.fini");




